<?php

/**
 * @file
 * Functions to support theming in the yamarin theme.
 */

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Site\Settings;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user\Entity\User;
use Drupal\block\Entity\Block;

function cd_group_preprocess(array &$variables) {
  $variables['base_path'] = base_path();
  $variables['base_url'] = $GLOBALS['base_url'];
  $variables['theme_path'] = base_path() . $variables['directory'];
  $variables['is_prod'] = getenv('MODE') !== 'DEV';
  /** @var \Drupal\user\UserInterface $user */
  $user = User::load(\Drupal::currentUser()->id());
  $variables['user_id'] = $user->id();
  $variables['is_logged_in'] = $user->isAuthenticated();
  $variables['is_admin'] = $user->hasPermission('access administration pages');
}

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function cd_group_preprocess_html(array &$variables) {
  $variables['node_edit_url'] = "/node/" . \Drupal::routeMatch()
      ->getRawParameter('node') . "/edit";
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function cd_group_preprocess_page(array &$variables) {
  if (\Drupal::currentUser()->isAnonymous() && !empty($variables['node'])) {
    $node_type = $variables['node']->getType();
    if (in_array($node_type, ['country_page', 'team_member'])) {
      throw new \Symfony\Component\HttpKernel\Exception\NotFoundHttpException();
    }
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 *
 * @param array $suggestions
 * @param array $variables
 */
function cd_group_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof \Drupal\node\NodeInterface) {
    $content_type = $node->bundle();
    $suggestions[] = 'page__' . $content_type;
  }

  /**
   * 404 template suggestion.
   */
  if (!is_null(Drupal::requestStack()
    ->getCurrentRequest()->attributes->get('exception'))) {
    $status_code = Drupal::requestStack()
      ->getCurrentRequest()->attributes->get('exception')->getStatusCode();
    switch ($status_code) {
      case 401:
      case 403:
      {
        $suggestions[] = 'page__403';
        break;
      }
      case 404:
      {
        $suggestions[] = 'page__404';
        break;
      }
      default:
        break;
    }
  }
}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function cd_group_theme_suggestions_node_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function cd_group_preprocess_block(array &$variables) {
    /**
     * Pass block region value to content so this can be used in
     * cd_group_theme_suggestions_menu_alter.
     */
    if (isset($variables['elements']['#id'])) {
        $region = Block::load($variables['elements']['#id'])->getRegion();
        $variables['content']['#attributes']['region'] = $region;
    }
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function cd_group_theme_suggestions_field_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function cd_group_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_node().
 */
function cd_group_preprocess_node(array &$variables) {
  /**
   * @var NodeInterface
   */
  $node = $variables['node'];

  switch ($node->getType()) {
    case 'front_page':
      // code here
      break;
    case 'about_us':
        // code here
      break;
  }
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function cd_group_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function cd_group_preprocess_form(array &$variables) {

}

/**
 * Implements hook_preprocess_field().
 */
function cd_group_preprocess_field(array &$variables, $hook) {

}

/**
 * Custom templates names for forms
 */

function cd_group_theme_suggestions_form_alter(&$suggestions, $vars, $hook) {
  // lets define the form twig template name
  if ($vars['element']['#type'] == 'form') {
    $original_theme_hook = $vars['theme_hook_original'];
    $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $vars['element']['#id']);
  }
  return $suggestions;
}

function cd_group_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    /*  echo $form_id;
      echo '<pre>';
      print_r($form);
      echo '</pre>';*/

  if (in_array($form_id, ['user_login_form'])) {
    $form['actions']['submit']['#value'] = t('Sign in');
  }
}


/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function cd_group_theme_suggestions_views_view_unformatted_alter(&$suggestions, $variables) {
  if (isset($variables['view']) && !empty($variables['view']->id())) {
    $suggestions[] = 'views_view_unformatted__' . $variables['view']->id();
  }
}

function cd_group_theme_suggestions_views_view_list_alter(&$suggestions, $variables) {
    if (isset($variables['view']) && !empty($variables['view']->id())) {
        $suggestions[] = 'views_view_list__' . $variables['view']->id();
    }
}

function cd_group_preprocess_region(&$variables) {

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Provide region based menu suggestions.
 */
function cd_group_theme_suggestions_menu_alter(&$suggestions, array $variables) {
    if (isset($variables['attributes']['region'])) {
        $suggestion = 'menu__' . $variables['menu_name'] . '__' . $variables['attributes']['region'];
        $suggestion = str_replace('-', '_', $suggestion);
        $suggestions[] = $suggestion;
    }
}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function cd_group_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;
}

function cd_group_preprocess_taxonomy_term(&$variables) {

}

function cd_group_preprocess_user(&$variables) {

}

function cd_group_get_taxonomy_value($taxonomy, $value, $identifier = 'value') {

}
